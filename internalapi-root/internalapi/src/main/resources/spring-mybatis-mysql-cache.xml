<?xml version="1.0" encoding="UTF-8"?>
<beans 
    xmlns="http://www.springframework.org/schema/beans"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
         http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
     
	<description>Spring数据及AOP配置 </description>

	<!-- 数据源配置,使用应用内的druid数据库连接池 -->
	<bean id="dataSourceMysqlCache" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<property name="driverClassName" value="${jdbc.mysql.cache.driver}" />
		<property name="url" value="${jdbc.mysql.cache.url}" />
		<property name="username" value="${jdbc.mysql.cache.username}" />
		<property name="password" value="${jdbc.mysql.cache.password}" />
        <!-- 初始化连接数量 -->
        <property name="initialSize" value="${druid.initialSize}" />
        <!-- 最大并发连接数 -->
        <property name="maxActive" value="${druid.maxActive}" />
        <!-- 最小空闲连接数 -->
        <property name="minIdle" value="${druid.minIdle}" />
        <!-- 配置获取连接等待超时的时间 -->     
        <property name="maxWait" value="${druid.maxWait}" />
        <!-- 超过时间限制是否回收 -->
        <property name="removeAbandoned" value="${druid.removeAbandoned}" />
        <!-- 超过时间限制多长； -->
        <property name="removeAbandonedTimeout" value="${druid.removeAbandonedTimeout}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${druid.timeBetweenEvictionRunsMillis}" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${druid.minEvictableIdleTimeMillis}" />
        <!-- 用来检测连接是否有效的sql，要求是一个查询语句-->
        <property name="validationQuery" value="${druid.validationQuery}" />
        <!-- 申请连接的时候检测 -->
        <property name="testWhileIdle" value="${druid.testWhileIdle}" />
        <!-- 申请连接时执行validationQuery检测连接是否有效，配置为true会降低性能 -->
        <property name="testOnBorrow" value="${druid.testOnBorrow}" />
        <!-- 归还连接时执行validationQuery检测连接是否有效，配置为true会降低性能  -->
        <property name="testOnReturn" value="${druid.testOnReturn}" />
        <!-- 数据库类型，暂时使用mysql -->
        <property name="dbType" value="${druid.mysql.cache.dbType}" />
        
        <!-- mysql 不支持 poolPreparedStatements--> 
        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <!-- <property name="poolPreparedStatements" value="${druid.poolPreparedStatements}" />     
        <property name="maxPoolPreparedStatementPerConnectionSize" value="${druid.maxPoolPreparedStatementPerConnectionSize}" /> -->
        
        <!--属性类型是字符串，通过别名的方式配置扩展插件，常用的插件有：                 
		                监控统计用的filter:stat
		                日志用的filter:log4j
		               防御SQL注入的filter:wall -->
        <property name="filters" value="${druid.filters}" />
	</bean>  
     
      <!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	  <bean id="sqlSessionFactoryMysqlCache" class="org.mybatis.spring.SqlSessionFactoryBean">
	    <property name="dataSource" ref="dataSourceMysqlCache" />
	    <!-- 自动扫描mapping.xml文件 -->
	    <property name="mapperLocations" value="classpath:com/hexun/yewu/order/mysql/cache/sqlxml/*.xml"></property>
	  </bean>
	  <bean id="sqlSessionTemplateMysqlCache" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactoryMysqlCache" />
	  </bean>
	  <bean id="baseMybatisDaoMysqlCache" class="com.hexun.framework.core.mybatis.BaseMybatisDao">
		<property name="sqlSessionFactory" ref="sqlSessionFactoryMysqlCache" />
	  </bean>
	
	  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	    <property name="basePackage" value="com.hexun.yewu.order.mysql.cache.mapper.*" />
	    <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryMysqlCache"></property>
	  </bean>
	  
	<!-- 事务管理器配置,单数据源事务 -->
	<bean id="transactionManagerMysqlCache"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSourceMysqlCache" />
	</bean>

	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManagerMysqlCache" proxy-target-class="true" />
	
</beans>